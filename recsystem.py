# -*- coding: utf-8 -*-
"""RecSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12BDpurYcKcFT68d1zb5TSOiIn6nDi5wl
"""

!pip install ampligraph

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import pandas as pd
import numpy as np
from ampligraph.latent_features import ComplEx
from ampligraph.evaluation import train_test_split_no_unseen
import tensorflow as tf
from sklearn.metrics import accuracy_score
import networkx as nx
from matplotlib import pyplot as plt

df = pd.read_csv("football_results.csv").sort_values("date")
df.isna().sum()

df = df.dropna()

df["train"] = df.date < "2016-01-01"
df.train.value_counts()

df["match_id"] = df.index.values.astype(str)
df["match_id"] =  "Match" + df.match_id
df["city_id"] = "City" + df.city.str.title().str.replace(" ", "")
df["country_id"] = "Country" + df.country.str.title().str.replace(" ", "")
df["home_team_id"] = "Team" + df.home_team.str.title().str.replace(" ", "")
df["away_team_id"] = "Team" + df.away_team.str.title().str.replace(" ", "")
df["tournament_id"] = "Tournament" + df.tournament.str.title().str.replace(" ", "")
df["neutral"] = df.neutral.astype(str)

df

triples = []
for _, row in df[df["train"]].iterrows():
    home_team = (row["home_team_id"], "isHomeTeamIn", row["match_id"])
    away_team = (row["away_team_id"], "isAwayTeamIn", row["match_id"])

    if row["home_score"] > row["away_score"]:
        score_home = (row["home_team_id"], "winnerOf", row["match_id"])
        score_away = (row["away_team_id"], "loserOf", row["match_id"])
    elif row["home_score"] < row["away_score"]:
        score_away = (row["away_team_id"], "winnerOf", row["match_id"])
        score_home = (row["home_team_id"], "loserOf", row["match_id"])
    else:
        score_home = (row["home_team_id"], "draws", row["match_id"])
        score_away = (row["away_team_id"], "draws", row["match_id"])
    home_score = (row["match_id"], "homeScores", np.clip(int(row["home_score"]), 0, 5))
    away_score = (row["match_id"], "awayScores", np.clip(int(row["away_score"]), 0, 5))

    tournament = (row["match_id"], "inTournament", row["tournament_id"])
    city = (row["match_id"], "inCity", row["city_id"])
    country = (row["match_id"], "inCountry", row["country_id"])
    neutral = (row["match_id"], "isNeutral", row["neutral"])
    year = (row["match_id"], "atYear", row["date"][:4])

    triples.extend((home_team, away_team, score_home, score_away,
                    tournament, city, country, neutral, year, home_score, away_score))

df

triples_df = pd.DataFrame(triples, columns=["subject", "predicate", "object"])
triples_df[(triples_df.subject=="Match3129") | (triples_df.object=="Match3129")]

asd = triples_df.drop(triples_df.index[1000:])

G=nx.from_pandas_edgelist(asd, "subject", "object",
                          edge_attr=True, create_using=nx.MultiDiGraph())

plt.figure(figsize=(12,12))

pos = nx.spring_layout(G)

for index, row in asd.iterrows():
    nx.draw_networkx_edge_labels(
        G, pos,
        edge_labels={(row['subject'], row['object']): row['predicate'],},
        font_color='red'
    )
nx.draw(G, with_labels=True, node_color='red', edge_cmap=plt.cm.Blues, pos = pos)
plt.show()

X_train, X_valid = train_test_split_no_unseen(np.array(triples), test_size=10000)

print('Train set size: ', X_train.shape)
print('Test set size: ', X_valid.shape)

model = ComplEx(batches_count=100,
                epochs=70,
                k=100,
                eta=10,
                verbose=True)

model.fit(X_train)

train_match_embeddings = model.get_embeddings(df.match_id[df["train"]])
train_matches = df.match_id[df["train"]]

from scipy import spatial
tree = spatial.KDTree(train_match_embeddings)

def recommend_n_matches(matchnames, n, model, train_matches):

  emb = model.get_embeddings(matchnames)

  neighs = tree.query(np.mean(emb, axis=0), n+1)[1][1:]
  print('ПОИСК МАТЧЕЙ, ПОХОЖИХ НА:\n')
  display(df[df["match_id"].isin(matchnames)])
  print('НАИБОЛЕЕ ПОХОЖИЕ\n')
  for neigh in neighs:
    display(df.loc[df.match_id == train_matches[neigh]])

recommend_n_matches(['Match0', 'Match100', 'Match200'], 3, model, train_matches)

